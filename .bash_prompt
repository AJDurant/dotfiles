# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# Git/SVN from https://gist.github.com/TheBrownSound/5701391

if [[ "$OSTYPE" == "freebsd"* ]]; then
    TERMC=Co
    SETAF=AF
    SGR=me
    BOLD=md
else
    TERMC=colors
    SETAF=setaf
    SGR=sgr0
    BOLD=bold
fi

if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Git/Subversion prompt function
__git_svn_ps1() {
    local s=
    if [[ $(svn info 2>/dev/null) ]] ; then
        local br=`__svn_branch_rev`
        s="[$br]"
    elif [[ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]] ; then
        s=`__prompt_git`
    fi
    if [ ! -z ${s} ] ; then
        echo -n "${1}${s}"
    else
        return "0"
    fi
}

# Outputs the current trunk, branch, or tag and revision
__svn_branch_rev() {
    data="$(svn info 2>/dev/null)"
    cr=$'\r'
    data="${data//${cr}/}"
    url_expr=$'\nRelative URL: *\^([^\n]*)'
    rev_expr=$'\nRevision: *([^\n]*)'
    if [[ "${data}" =~ $url_expr ]]
    then
        rel="${BASH_REMATCH[1]}"
    fi
    if [[ "${data}" =~ $rev_expr ]]
    then
        rev="${BASH_REMATCH[1]}"
    fi
    case "${url}${rev}" in
    "")
        # No svn info found: don't output any text
        return
        ;;
    esac

    rel="${rel/branches\//}"      # remove "branches/"
    rel="${rel/tags\//TAG:}"      # turn "tags/" into "TAG:"
    rel="${rel/releases\//R:}"    # turn "releases/" into "R:"
    rel="${rel/trunk/T}"          # turn "trunk" into "T"

    # This collapses down any /... to remove the slash and anything after the next slash
    slash_expr='([^/]*)/([^/]*).*'
    if [[ "${rel}" =~ $slash_expr ]]
    then
        rel="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
    fi
    echo "${rel%% *}":"${rev}"   # remove anything after & including first space and put into brackets with leading space
}

__prompt_git() {
    local s='';
    local branchName='';

    # check if the current directory is in .git before running git checks
    if [[ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]]; then

        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null;

        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
            s+='+';
        fi;

        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
            s+='!';
        fi;

        # Check for untracked files.
        if [[ -n "$(git ls-files --others --exclude-standard)" ]]; then
            s+='?';
        fi;

        # Check for stashed files.
        if $(git rev-parse --verify refs/stash &>/dev/null); then
            s+='$';
        fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    echo -e "${branchName}${blue}${s}";
}

if tput $SETAF 1 &> /dev/null; then
    tput $SGR;
    bold=$(tput $BOLD);
    reset=$(tput $SGR);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput $SETAF 0);
    blue=$(tput $SETAF 33);
    cyan=$(tput $SETAF 37);
    green=$(tput $SETAF 64);
    orange=$(tput $SETAF 166);
    purple=$(tput $SETAF 125);
    red=$(tput $SETAF 124);
    violet=$(tput $SETAF 61);
    white=$(tput $SETAF 15);
    yellow=$(tput $SETAF 136);

else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

# Set the terminal title to username@host: cwd
PS1="\[\e]0;\u@\h: \w\a\]";
# newline
PS1+="\[${bold}\]\n";
# username at
PS1+="\[${userStyle}\]\u";
PS1+="\[${white}\] at ";
# host
PS1+="\[${hostStyle}\]\h";
# chroot in inside
PS1+="${debian_chroot:+($debian_chroot)}";
PS1+="\[${white}\] in ";
# working directory
PS1+="\[${green}\]\w";
# Git/SVN details
PS1+="\$(__git_svn_ps1 \"${white} on ${violet}\")";
PS1+=$'\n';
# `$` (and reset color)
PS1+="\[${white}\]\$ \[${reset}\]";
export PS1;

PS2="\[${yellow}\]> \[${reset}\]";
export PS2;
