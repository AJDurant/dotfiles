# ~/.inputrc: readline initialization file.

# the following line is actually
# equivalent to "\C-?": delete-char
# "\e[3~": delete-char

# VT
# "\e[1~": beginning-of-line
# "\e[4~": end-of-line

# kvt
# "\e[H": beginning-of-line
# "\e[F": end-of-line

# rxvt and konsole (i.e. the KDE-app...)
# "\e[7~": beginning-of-line
# "\e[8~": end-of-line

# VT220
# "\eOH": beginning-of-line
# "\eOF": end-of-line

# Allow 8-bit input/output
# set meta-flag on
# set convert-meta off
# set input-meta on
# set output-meta on

#$if Bash
    # Don't ring bell on completion
    set bell-style none

    # or, don't beep at me - show me
    #set bell-style visible

    # Show all instead of beeping first
    set show-all-if-ambiguous off

    # Filename completion/expansion

    # Make Tab autocomplete regardless of filename case
    set completion-ignore-case on

    # List all matches in case multiple possible completions are possible
    set show-all-if-ambiguous on

    # Immediately add a trailing slash when autocompleting symlinks to directories
    set mark-symlinked-directories on

    # Use the text that has already been typed as the prefix for searching through
    # commands (i.e. more intelligent Up/Down behavior)
    "\e[B": history-search-forward
    "\e[A": history-search-backward

    # Do not autocomplete hidden files unless the pattern explicitly begins with a dot
    set match-hidden-files off

    # Show all autocomplete results at once
    set page-completions off

    # If there are more than 200 possible completions for a word, ask to show them all
    set completion-query-items 200

    # Show extra file information when completing, like `ls -F` does
    set visible-stats on

    # Be more intelligent when autocompleting by also looking at the text after
    # the cursor. For example, when the current line is "cd ~/src/mozil", and
    # the cursor is on the "z", pressing Tab will not autocomplete it to "cd
    # ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
    # Readline used by Bash 4.)
    set skip-completed-text on

    # Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
    set input-meta on
    set output-meta on
    set convert-meta off

    # Use Alt/Meta + Delete to delete the preceding word
    "\e[3;3~": kill-word

#$endif

# MSYSTEM is emacs based
$if mode=emacs
    # Common to Console & RXVT
    "\C-?": backward-kill-line         # Ctrl-BackSpace
    "\e[2~": paste-from-clipboard      # "Ins. Key"
    "\e[5~": beginning-of-history      # Page up
    "\e[6~": end-of-history            # Page down

    $if term=msys # RXVT
        "\e[7~": beginning-of-line      # Home Key
        "\e[8~": end-of-line            # End Key
        "\e[11~": display-shell-version # F1
        "\e[15~": re-read-init-file     # F5
        "\e[12~": "Function Key 2"
        "\e[13~": "Function Key 3"
        "\e[14~": "Function Key 4"
        "\e[17~": "Function Key 6"
        "\e[18~": "Function Key 7"
        "\e[19~": "Function Key 8"
        "\e[20~": "Function Key 9"
        "\e[21~": "Function Key 10"
    $else
        # Eh, normal Console is not really cygwin anymore, is it? Using 'else' instead. -mstormo
        # $if term=cygwin # Console
        "\e[1~": beginning-of-line      # Home Key
        "\e[4~": end-of-line            # End Key
        "\e[3~": delete-char      # Delete Key
        "\e\e[C": forward-word      # Alt-Right
        "\e\e[D": backward-word      # Alt-Left
        "\e[1;5C": forward-word   # ctrl + right
        "\e[1;5D": backward-word  # ctrl + left
        "\e[17~": "Function Key 6"
        "\e[18~": "Function Key 7"
        "\e[19~": "Function Key 8"
        "\e[20~": "Function Key 9"
        "\e[21~": "Function Key 10"
        "\e[23~": "Function Key 11"
    $endif
$endif
